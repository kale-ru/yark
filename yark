#!/usr/bin/env python

from gi.repository import Gtk
import subprocess


class BrightnessScale:

    def __init__(self):
        # get monitor list
        self.monitors = self.getMonitorList()

    def destroy(self, widget, data=None):
        Gtk.main_quit()

    def initUI(self):
        # initliaze and configure window
        window = Gtk.Window()
        # close Gtk thread on closing window
        window.connect("destroy", self.destroy)
        # window.connect("focus-out-event", lambda w: Gtk.main_quit())
        window.connect("focus-out-event", self.destroy)
        window.set_title('Brightness Scale')
        window.set_default_size(250, 50*len(self.monitors))
        window.set_position(Gtk.WindowPosition.CENTER)

        window.set_border_width(10)
        # disable taskbar hint
        window.set_skip_taskbar_hint(True)

        vbox = Gtk.VBox()
        window.add(vbox)

        # slider configuration
        adjustment = range(len(self.monitors))
        self._scale = range(len(self.monitors))
        currB = self.getCurrentBrightness()
        for n_monitor in range(len(self.monitors)):
            label = Gtk.Label(self.monitors[n_monitor])
            vbox.pack_start(label, False)


            adjustment[n_monitor] = Gtk.Adjustment(currB[n_monitor], 0, 100, 1, 10, 0)
            self._scale[n_monitor] = Gtk.HScale()
            self._scale[n_monitor].set_adjustment(adjustment[n_monitor])
            self._scale[n_monitor].set_digits(0)

            # setup event handler on value-changed
            self._scale[n_monitor].connect("value-changed", self._scale_moved, n_monitor)
            # add the scale to window
            vbox.pack_start(self._scale[n_monitor], False)

        # show all components in window
        window.show_all()

        # close window on pressing escape key
        accGroup = Gtk.AccelGroup()
        key, modifier = Gtk.accelerator_parse('Escape')
        accGroup.connect(key, modifier, Gtk.AccelFlags.VISIBLE, Gtk.main_quit)
        window.add_accel_group(accGroup)

    def showErrDialog(self):
        self.errDialog = Gtk.MessageDialog(None,
                                           Gtk.DialogFlags.MODAL,
                                           Gtk.MessageType.ERROR,
                                           Gtk.ButtonsType.OK,
                                           "Unable to detect active monitor, run 'xrandr --verbose' on command-line for more info")
        self.errDialog.set_title("brightness control error")
        self.errDialog.run()
        self.errDialog.destroy()

    def initStatus(self):
        if(len(self.monitors) == 0):
            return False
        return True

    def getMonitorList(self):
        # Find display monitor
        monitor = subprocess.check_output("xrandr -q | grep ' connected' | cut -d ' ' -f1", shell=True)
        monitor = monitor.split('\n')
        monitor.pop()
        return monitor

    def getCurrentBrightness(self):
        # Find current brightness
        currB = subprocess.check_output("xrandr --verbose | grep -i brightness | cut -f2 -d ' '", shell=True)
        currB = currB.split('\n')
        currB.pop()
        for n in range(len(currB)):
            currB[n] = int(float(currB[n]) * 100)
        return currB

    def _scale_moved(self, event, n_monitor):
        # Change brightness
        newBrightness = float(self._scale[n_monitor].get_value())/100
        cmd = "xrandr --output %s --brightness %.2f" % (self.monitors[n_monitor], newBrightness)
        subprocess.check_output(cmd, shell=True)

orig_pack_start = Gtk.Box.pack_start


def pack_start(self, child, expand=True, fill=True, padding=0):
    orig_pack_start(self, child, expand, fill, padding)
Gtk.Box.pack_start = pack_start

if __name__ == "__main__":
    # new instance of BrightnessScale
    brcontrol = BrightnessScale()
    if(brcontrol.initStatus()):
        # if everything ok, invoke UI and start Gtk thread loop
        brcontrol.initUI()
        Gtk.main()
    else:
        # show error dialog
        brcontrol.showErrDialog()
